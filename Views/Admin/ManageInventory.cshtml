@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Inventory</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100">

    <!-- 🔹 Navbar (Improved) -->
    <nav class="bg-blue-600 text-white p-4 flex justify-between items-center shadow-md">
        <h1 class="text-xl font-semibold">Admin Panel</h1>

        <!-- 🔹 Mobile Menu Button (Fixed) -->
        <button id="menu-toggle" class="md:hidden focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
            </svg>
        </button>

        <!-- 🔹 Navigation Links (Updated to match Dashboard) -->
        <ul id="menu" class="hidden md:flex space-x-6 md:static md:bg-transparent absolute left-0 top-16 w-full bg-blue-600 md:w-auto p-4 md:p-0 shadow-md md:shadow-none">
            <li><a href="/Admin/Dashboard" class="block py-2 md:py-0 hover:underline">Dashboard</a></li>
            <li><a href="/Admin/ManageUsers" class="block py-2 md:py-0 hover:underline">Manage Users</a></li>
            <li><a href="/Admin/ManageInventory" class="block py-2 md:py-0 hover:underline">Manage Inventory</a></li>
            <li><a href="/Admin/Logout" class="block py-2 md:py-0 hover:underline">Logout</a></li>
        </ul>
    </nav>

    <!-- 🔹 JavaScript for Navbar Toggle (Fixed) -->
    <script>
        document.getElementById("menu-toggle").addEventListener("click", function() {
            document.getElementById("menu").classList.toggle("hidden");
        });
    </script>

    <!-- Main Content -->
    <div class="container mx-auto p-6">
        <!-- Feedback Messages -->
        @if (TempData["Success"] != null)
        {
            <div class="bg-green-500 text-white p-3 rounded mb-4">
                @TempData["Success"]
            </div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="bg-red-500 text-white p-3 rounded mb-4">
                @TempData["Error"]
            </div>
        }

        <!-- Filter by User -->
        <div class="mb-4">
            <label for="userFilter" class="block text-sm font-medium text-gray-700">Filter by User:</label>
            <select id="userFilter" class="mt-1 p-2 w-full border rounded" onchange="filterInventory()">
                <option value="all">All Users</option>
                @foreach (var user in ViewBag.Users)
                {
                    <option value="@user.Id">@user.Email</option>
                }
            </select>
        </div>

        <!-- Inventory Cards -->
        <div id="inventoryGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var item in ViewBag.Inventory)
            {
            <div class="bg-white p-4 shadow-md rounded inventory-card" data-user="@item.UserId">
                <h2 class="text-lg font-semibold">@item.Name</h2>
                <p class="text-sm text-gray-600">Owned by: @item.UserEmail</p>
                <p class="text-sm">Quantity: <strong>@item.Quantity</strong></p>
                <p class="text-sm">Price: <strong>$@item.Price</strong></p>

                <!-- Buttons -->
                <div class="mt-3 flex space-x-2">
                    <button onclick="showEditForm('@item.Id', '@item.Name', '@item.Quantity', '@item.Price')" 
                            class="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-700">Edit</button>
                        <button onclick="deleteInventory('@item.Id')" 
            class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-700">Delete</button>
     </div>

                <!-- Hidden Edit Form -->
                <form id="editForm-@item.Id" class="hidden mt-4 bg-gray-100 p-4 rounded">
                    <input type="hidden" id="editItemId-@item.Id" value="@item.Id" />

                    <label class="block text-sm font-medium text-gray-700">Item Name</label>
                    <input type="text" id="editName-@item.Id" value="@item.Name" class="mt-1 p-2 w-full border rounded" required />

                    <label class="block text-sm font-medium text-gray-700 mt-3">Quantity</label>
                    <input type="number" id="editQuantity-@item.Id" value="@item.Quantity" class="mt-1 p-2 w-full border rounded" required />

                    <label class="block text-sm font-medium text-gray-700 mt-3">Price</label>
                    <input type="number" step="0.01" id="editPrice-@item.Id" value="@item.Price" class="mt-1 p-2 w-full border rounded" required />

                    <div class="mt-3 flex space-x-2">
                        <button type="button" onclick="submitEditForm('@item.Id')" 
                                class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700">Save</button>
                        <button type="button" onclick="hideEditForm('@item.Id')" 
                                class="bg-gray-500 text-white px-3 py-1 rounded hover:bg-gray-700">Cancel</button>
                    </div>
                </form>
            </div>
            }
</div>
<form id="deleteForm">
            @Html.AntiForgeryToken()
</form>

    </div>

    <script>
        function filterInventory() {
            let selectedUser = document.getElementById("userFilter").value;
            let cards = document.querySelectorAll(".inventory-card");

            cards.forEach(card => {
                if (selectedUser === "all" || card.dataset.user === selectedUser) {
                    card.style.display = "block";
                } else {
                    card.style.display = "none";
                }
            });
        }

        function showEditForm(itemId, name, quantity, price) {
    document.getElementById(`editForm-${itemId}`).classList.remove("hidden");
}

function hideEditForm(itemId) {
    document.getElementById(`editForm-${itemId}`).classList.add("hidden");
}

function submitEditForm(itemId) {
    let updatedName = document.getElementById(`editName-${itemId}`).value;
    let updatedQuantity = document.getElementById(`editQuantity-${itemId}`).value;
    let updatedPrice = document.getElementById(`editPrice-${itemId}`).value;

    Swal.fire({
        title: "Are you sure?",
        text: "You are about to update this inventory item.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, update!"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/Admin/EditInventory', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    Id: itemId,
                    Name: updatedName,
                    Quantity: updatedQuantity,
                    Price: updatedPrice
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire("Updated!", data.message, "success").then(() => location.reload());
                } else {
                    Swal.fire("Error!", data.message, "error");
                }
            });
        }
    });
}


function deleteInventory(itemId) {
    Swal.fire({
        title: "Are you sure?",
        text: "This action cannot be undone!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!"
    }).then((result) => {
        if (result.isConfirmed) {
            // ✅ Get CSRF Token from hidden form
            const token = document.querySelector("#deleteForm input[name='__RequestVerificationToken']").value;

            fetch('/Admin/DeleteInventory', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token // ✅ Ensure CSRF Token is included
                },
                body: JSON.stringify({ Id: itemId }) // ✅ Send as an object
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire("Deleted!", data.message, "success").then(() => location.reload());
                } else {
                    Swal.fire("Error!", data.message, "error");
                }
            })
            .catch(error => {
                Swal.fire("Error!", "Something went wrong.", "error");
            });
        }
    });
}



    </script>

</body>
</html>
